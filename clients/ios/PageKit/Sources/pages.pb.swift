/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: pages.proto
 *
 */

import Foundation
import SwiftProtobuf


public struct Empty: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Empty"}
  public var protoMessageName: String {return "Empty"}
  public var protoPackageName: String {return ""}
  public var jsonFieldNames: [String: Int] {return [:]}
  public var protoFieldNames: [String: Int] {return [:]}

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    return false // Proto3 ignores unknown fields
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
  }

  public func _protoc_generated_isEqualTo(other: Empty) -> Bool {
    return true
  }
}

public struct Account: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Account"}
  public var protoMessageName: String {return "Account"}
  public var protoPackageName: String {return ""}
  public var jsonFieldNames: [String: Int] {return [
    "id": 1,
    "name": 2,
    "email": 3,
    "created": 5,
    "modified": 6,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "id": 1,
    "name": 2,
    "email": 3,
    "created": 5,
    "modified": 6,
  ]}

  public var id: String = ""

  public var name: String = ""

  public var email: String = ""

  public var created: Int64 = 0

  public var modified: Int64 = 0

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    let handled: Bool
    switch protoFieldNumber {
    case 1: handled = try setter.decodeSingularField(fieldType: ProtobufString.self, value: &id)
    case 2: handled = try setter.decodeSingularField(fieldType: ProtobufString.self, value: &name)
    case 3: handled = try setter.decodeSingularField(fieldType: ProtobufString.self, value: &email)
    case 5: handled = try setter.decodeSingularField(fieldType: ProtobufInt64.self, value: &created)
    case 6: handled = try setter.decodeSingularField(fieldType: ProtobufInt64.self, value: &modified)
    default:
      handled = false
    }
    return handled
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    if id != "" {
      try visitor.visitSingularField(fieldType: ProtobufString.self, value: id, protoFieldNumber: 1, protoFieldName: "id", jsonFieldName: "id", swiftFieldName: "id")
    }
    if name != "" {
      try visitor.visitSingularField(fieldType: ProtobufString.self, value: name, protoFieldNumber: 2, protoFieldName: "name", jsonFieldName: "name", swiftFieldName: "name")
    }
    if email != "" {
      try visitor.visitSingularField(fieldType: ProtobufString.self, value: email, protoFieldNumber: 3, protoFieldName: "email", jsonFieldName: "email", swiftFieldName: "email")
    }
    if created != 0 {
      try visitor.visitSingularField(fieldType: ProtobufInt64.self, value: created, protoFieldNumber: 5, protoFieldName: "created", jsonFieldName: "created", swiftFieldName: "created")
    }
    if modified != 0 {
      try visitor.visitSingularField(fieldType: ProtobufInt64.self, value: modified, protoFieldNumber: 6, protoFieldName: "modified", jsonFieldName: "modified", swiftFieldName: "modified")
    }
  }

  public func _protoc_generated_isEqualTo(other: Account) -> Bool {
    if id != other.id {return false}
    if name != other.name {return false}
    if email != other.email {return false}
    if created != other.created {return false}
    if modified != other.modified {return false}
    return true
  }
}

public struct Session: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Session"}
  public var protoMessageName: String {return "Session"}
  public var protoPackageName: String {return ""}
  public var jsonFieldNames: [String: Int] {return [
    "account": 1,
    "token": 2,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "account": 1,
    "token": 2,
  ]}

  private class _StorageClass {
    typealias ProtobufExtendedMessage = Session
    var _account: Account? = nil
    var _token: String = ""

    init() {}

    func decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularMessageField(fieldType: Account.self, value: &_account)
      case 2: handled = try setter.decodeSingularField(fieldType: ProtobufString.self, value: &_token)
      default:
        handled = false
      }
      return handled
    }

    func traverse(visitor: inout ProtobufVisitor) throws {
      if let v = _account {
        try visitor.visitSingularMessageField(value: v, protoFieldNumber: 1, protoFieldName: "account", jsonFieldName: "account", swiftFieldName: "account")
      }
      if _token != "" {
        try visitor.visitSingularField(fieldType: ProtobufString.self, value: _token, protoFieldNumber: 2, protoFieldName: "token", jsonFieldName: "token", swiftFieldName: "token")
      }
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _account != other._account {return false}
      if _token != other._token {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._account = _account
      clone._token = _token
      return clone
    }
  }

  private var _storage = _StorageClass()

  public var account: Account {
    get {return _storage._account ?? Account()}
    set {_uniqueStorage()._account = newValue}
  }
  public var hasAccount: Bool {
    return _storage._account != nil
  }
  public mutating func clearAccount() {
    return _storage._account = nil
  }

  public var token: String {
    get {return _storage._token}
    set {_uniqueStorage()._token = newValue}
  }

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    return try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    try _storage.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: Session) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

public struct RegisterRequest: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "RegisterRequest"}
  public var protoMessageName: String {return "RegisterRequest"}
  public var protoPackageName: String {return ""}
  public var jsonFieldNames: [String: Int] {return [
    "name": 1,
    "email": 2,
    "password": 3,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "name": 1,
    "email": 2,
    "password": 3,
  ]}

  public var name: String = ""

  public var email: String = ""

  public var password: String = ""

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    let handled: Bool
    switch protoFieldNumber {
    case 1: handled = try setter.decodeSingularField(fieldType: ProtobufString.self, value: &name)
    case 2: handled = try setter.decodeSingularField(fieldType: ProtobufString.self, value: &email)
    case 3: handled = try setter.decodeSingularField(fieldType: ProtobufString.self, value: &password)
    default:
      handled = false
    }
    return handled
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    if name != "" {
      try visitor.visitSingularField(fieldType: ProtobufString.self, value: name, protoFieldNumber: 1, protoFieldName: "name", jsonFieldName: "name", swiftFieldName: "name")
    }
    if email != "" {
      try visitor.visitSingularField(fieldType: ProtobufString.self, value: email, protoFieldNumber: 2, protoFieldName: "email", jsonFieldName: "email", swiftFieldName: "email")
    }
    if password != "" {
      try visitor.visitSingularField(fieldType: ProtobufString.self, value: password, protoFieldNumber: 3, protoFieldName: "password", jsonFieldName: "password", swiftFieldName: "password")
    }
  }

  public func _protoc_generated_isEqualTo(other: RegisterRequest) -> Bool {
    if name != other.name {return false}
    if email != other.email {return false}
    if password != other.password {return false}
    return true
  }
}

public struct ConnectRequest: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "ConnectRequest"}
  public var protoMessageName: String {return "ConnectRequest"}
  public var protoPackageName: String {return ""}
  public var jsonFieldNames: [String: Int] {return [
    "identifier": 1,
    "password": 2,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "identifier": 1,
    "password": 2,
  ]}

  public var identifier: String = ""

  public var password: String = ""

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    let handled: Bool
    switch protoFieldNumber {
    case 1: handled = try setter.decodeSingularField(fieldType: ProtobufString.self, value: &identifier)
    case 2: handled = try setter.decodeSingularField(fieldType: ProtobufString.self, value: &password)
    default:
      handled = false
    }
    return handled
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    if identifier != "" {
      try visitor.visitSingularField(fieldType: ProtobufString.self, value: identifier, protoFieldNumber: 1, protoFieldName: "identifier", jsonFieldName: "identifier", swiftFieldName: "identifier")
    }
    if password != "" {
      try visitor.visitSingularField(fieldType: ProtobufString.self, value: password, protoFieldNumber: 2, protoFieldName: "password", jsonFieldName: "password", swiftFieldName: "password")
    }
  }

  public func _protoc_generated_isEqualTo(other: ConnectRequest) -> Bool {
    if identifier != other.identifier {return false}
    if password != other.password {return false}
    return true
  }
}

public struct PageGetRequest: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "PageGetRequest"}
  public var protoMessageName: String {return "PageGetRequest"}
  public var protoPackageName: String {return ""}
  public var jsonFieldNames: [String: Int] {return [
    "id": 1,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "id": 1,
  ]}

  public var id: String = ""

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    let handled: Bool
    switch protoFieldNumber {
    case 1: handled = try setter.decodeSingularField(fieldType: ProtobufString.self, value: &id)
    default:
      handled = false
    }
    return handled
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    if id != "" {
      try visitor.visitSingularField(fieldType: ProtobufString.self, value: id, protoFieldNumber: 1, protoFieldName: "id", jsonFieldName: "id", swiftFieldName: "id")
    }
  }

  public func _protoc_generated_isEqualTo(other: PageGetRequest) -> Bool {
    if id != other.id {return false}
    return true
  }
}

public struct PageCreateRequest: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "PageCreateRequest"}
  public var protoMessageName: String {return "PageCreateRequest"}
  public var protoPackageName: String {return ""}
  public var jsonFieldNames: [String: Int] {return [
    "text": 1,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "text": 1,
  ]}

  public var text: String = ""

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    let handled: Bool
    switch protoFieldNumber {
    case 1: handled = try setter.decodeSingularField(fieldType: ProtobufString.self, value: &text)
    default:
      handled = false
    }
    return handled
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    if text != "" {
      try visitor.visitSingularField(fieldType: ProtobufString.self, value: text, protoFieldNumber: 1, protoFieldName: "text", jsonFieldName: "text", swiftFieldName: "text")
    }
  }

  public func _protoc_generated_isEqualTo(other: PageCreateRequest) -> Bool {
    if text != other.text {return false}
    return true
  }
}

public struct PageUpdateRequest: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "PageUpdateRequest"}
  public var protoMessageName: String {return "PageUpdateRequest"}
  public var protoPackageName: String {return ""}
  public var jsonFieldNames: [String: Int] {return [
    "id": 1,
    "text": 2,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "id": 1,
    "text": 2,
  ]}

  public var id: String = ""

  public var text: String = ""

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    let handled: Bool
    switch protoFieldNumber {
    case 1: handled = try setter.decodeSingularField(fieldType: ProtobufString.self, value: &id)
    case 2: handled = try setter.decodeSingularField(fieldType: ProtobufString.self, value: &text)
    default:
      handled = false
    }
    return handled
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    if id != "" {
      try visitor.visitSingularField(fieldType: ProtobufString.self, value: id, protoFieldNumber: 1, protoFieldName: "id", jsonFieldName: "id", swiftFieldName: "id")
    }
    if text != "" {
      try visitor.visitSingularField(fieldType: ProtobufString.self, value: text, protoFieldNumber: 2, protoFieldName: "text", jsonFieldName: "text", swiftFieldName: "text")
    }
  }

  public func _protoc_generated_isEqualTo(other: PageUpdateRequest) -> Bool {
    if id != other.id {return false}
    if text != other.text {return false}
    return true
  }
}

public struct PageDeleteRequest: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "PageDeleteRequest"}
  public var protoMessageName: String {return "PageDeleteRequest"}
  public var protoPackageName: String {return ""}
  public var jsonFieldNames: [String: Int] {return [
    "id": 1,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "id": 1,
  ]}

  public var id: String = ""

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    let handled: Bool
    switch protoFieldNumber {
    case 1: handled = try setter.decodeSingularField(fieldType: ProtobufString.self, value: &id)
    default:
      handled = false
    }
    return handled
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    if id != "" {
      try visitor.visitSingularField(fieldType: ProtobufString.self, value: id, protoFieldNumber: 1, protoFieldName: "id", jsonFieldName: "id", swiftFieldName: "id")
    }
  }

  public func _protoc_generated_isEqualTo(other: PageDeleteRequest) -> Bool {
    if id != other.id {return false}
    return true
  }
}

public struct Page: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Page"}
  public var protoMessageName: String {return "Page"}
  public var protoPackageName: String {return ""}
  public var jsonFieldNames: [String: Int] {return [
    "id": 1,
    "account": 2,
    "text": 3,
    "created": 4,
    "modified": 5,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "id": 1,
    "account": 2,
    "text": 3,
    "created": 4,
    "modified": 5,
  ]}

  private class _StorageClass {
    typealias ProtobufExtendedMessage = Page
    var _id: String = ""
    var _account: Account? = nil
    var _text: String = ""
    var _created: Int64 = 0
    var _modified: Int64 = 0

    init() {}

    func decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufString.self, value: &_id)
      case 2: handled = try setter.decodeSingularMessageField(fieldType: Account.self, value: &_account)
      case 3: handled = try setter.decodeSingularField(fieldType: ProtobufString.self, value: &_text)
      case 4: handled = try setter.decodeSingularField(fieldType: ProtobufInt64.self, value: &_created)
      case 5: handled = try setter.decodeSingularField(fieldType: ProtobufInt64.self, value: &_modified)
      default:
        handled = false
      }
      return handled
    }

    func traverse(visitor: inout ProtobufVisitor) throws {
      if _id != "" {
        try visitor.visitSingularField(fieldType: ProtobufString.self, value: _id, protoFieldNumber: 1, protoFieldName: "id", jsonFieldName: "id", swiftFieldName: "id")
      }
      if let v = _account {
        try visitor.visitSingularMessageField(value: v, protoFieldNumber: 2, protoFieldName: "account", jsonFieldName: "account", swiftFieldName: "account")
      }
      if _text != "" {
        try visitor.visitSingularField(fieldType: ProtobufString.self, value: _text, protoFieldNumber: 3, protoFieldName: "text", jsonFieldName: "text", swiftFieldName: "text")
      }
      if _created != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt64.self, value: _created, protoFieldNumber: 4, protoFieldName: "created", jsonFieldName: "created", swiftFieldName: "created")
      }
      if _modified != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt64.self, value: _modified, protoFieldNumber: 5, protoFieldName: "modified", jsonFieldName: "modified", swiftFieldName: "modified")
      }
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _id != other._id {return false}
      if _account != other._account {return false}
      if _text != other._text {return false}
      if _created != other._created {return false}
      if _modified != other._modified {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._id = _id
      clone._account = _account
      clone._text = _text
      clone._created = _created
      clone._modified = _modified
      return clone
    }
  }

  private var _storage = _StorageClass()

  public var id: String {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  public var account: Account {
    get {return _storage._account ?? Account()}
    set {_uniqueStorage()._account = newValue}
  }
  public var hasAccount: Bool {
    return _storage._account != nil
  }
  public mutating func clearAccount() {
    return _storage._account = nil
  }

  public var text: String {
    get {return _storage._text}
    set {_uniqueStorage()._text = newValue}
  }

  public var created: Int64 {
    get {return _storage._created}
    set {_uniqueStorage()._created = newValue}
  }

  public var modified: Int64 {
    get {return _storage._modified}
    set {_uniqueStorage()._modified = newValue}
  }

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    return try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    try _storage.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: Page) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

public struct PagesSet: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "PagesSet"}
  public var protoMessageName: String {return "PagesSet"}
  public var protoPackageName: String {return ""}
  public var jsonFieldNames: [String: Int] {return [
    "pages": 1,
    "total": 2,
    "page": 3,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "pages": 1,
    "total": 2,
    "page": 3,
  ]}

  public var pages: [Page] = []

  public var total: Int64 = 0

  public var page: Int64 = 0

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    let handled: Bool
    switch protoFieldNumber {
    case 1: handled = try setter.decodeRepeatedMessageField(fieldType: Page.self, value: &pages)
    case 2: handled = try setter.decodeSingularField(fieldType: ProtobufInt64.self, value: &total)
    case 3: handled = try setter.decodeSingularField(fieldType: ProtobufInt64.self, value: &page)
    default:
      handled = false
    }
    return handled
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    if !pages.isEmpty {
      try visitor.visitRepeatedMessageField(value: pages, protoFieldNumber: 1, protoFieldName: "pages", jsonFieldName: "pages", swiftFieldName: "pages")
    }
    if total != 0 {
      try visitor.visitSingularField(fieldType: ProtobufInt64.self, value: total, protoFieldNumber: 2, protoFieldName: "total", jsonFieldName: "total", swiftFieldName: "total")
    }
    if page != 0 {
      try visitor.visitSingularField(fieldType: ProtobufInt64.self, value: page, protoFieldNumber: 3, protoFieldName: "page", jsonFieldName: "page", swiftFieldName: "page")
    }
  }

  public func _protoc_generated_isEqualTo(other: PagesSet) -> Bool {
    if pages != other.pages {return false}
    if total != other.total {return false}
    if page != other.page {return false}
    return true
  }
}
