// Code generated by protoc-gen-go.
// source: pages.proto
// DO NOT EDIT!

/*
Package pages is a generated protocol buffer package.

It is generated from these files:
	pages.proto

It has these top-level messages:
	Empty
	Account
	Session
	RegisterRequest
	ConnectRequest
	PageGetRequest
	PageCreateRequest
	PageUpdateRequest
	PageDeleteRequest
	Page
	PagesSet
*/
package pages

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis/google/api"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Account struct {
	Id       string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Email    string `protobuf:"bytes,3,opt,name=email" json:"email,omitempty"`
	Created  int64  `protobuf:"varint,5,opt,name=created" json:"created,omitempty"`
	Modified int64  `protobuf:"varint,6,opt,name=modified" json:"modified,omitempty"`
}

func (m *Account) Reset()                    { *m = Account{} }
func (m *Account) String() string            { return proto.CompactTextString(m) }
func (*Account) ProtoMessage()               {}
func (*Account) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Session struct {
	Account *Account `protobuf:"bytes,1,opt,name=account" json:"account,omitempty"`
	Token   string   `protobuf:"bytes,2,opt,name=token" json:"token,omitempty"`
}

func (m *Session) Reset()                    { *m = Session{} }
func (m *Session) String() string            { return proto.CompactTextString(m) }
func (*Session) ProtoMessage()               {}
func (*Session) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Session) GetAccount() *Account {
	if m != nil {
		return m.Account
	}
	return nil
}

type RegisterRequest struct {
	Name     string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Email    string `protobuf:"bytes,2,opt,name=email" json:"email,omitempty"`
	Password string `protobuf:"bytes,3,opt,name=password" json:"password,omitempty"`
}

func (m *RegisterRequest) Reset()                    { *m = RegisterRequest{} }
func (m *RegisterRequest) String() string            { return proto.CompactTextString(m) }
func (*RegisterRequest) ProtoMessage()               {}
func (*RegisterRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type ConnectRequest struct {
	Identifier string `protobuf:"bytes,1,opt,name=identifier" json:"identifier,omitempty"`
	Password   string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
}

func (m *ConnectRequest) Reset()                    { *m = ConnectRequest{} }
func (m *ConnectRequest) String() string            { return proto.CompactTextString(m) }
func (*ConnectRequest) ProtoMessage()               {}
func (*ConnectRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type PageGetRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *PageGetRequest) Reset()                    { *m = PageGetRequest{} }
func (m *PageGetRequest) String() string            { return proto.CompactTextString(m) }
func (*PageGetRequest) ProtoMessage()               {}
func (*PageGetRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type PageCreateRequest struct {
	Text string `protobuf:"bytes,1,opt,name=text" json:"text,omitempty"`
}

func (m *PageCreateRequest) Reset()                    { *m = PageCreateRequest{} }
func (m *PageCreateRequest) String() string            { return proto.CompactTextString(m) }
func (*PageCreateRequest) ProtoMessage()               {}
func (*PageCreateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type PageUpdateRequest struct {
	Id   string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Text string `protobuf:"bytes,2,opt,name=text" json:"text,omitempty"`
}

func (m *PageUpdateRequest) Reset()                    { *m = PageUpdateRequest{} }
func (m *PageUpdateRequest) String() string            { return proto.CompactTextString(m) }
func (*PageUpdateRequest) ProtoMessage()               {}
func (*PageUpdateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type PageDeleteRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *PageDeleteRequest) Reset()                    { *m = PageDeleteRequest{} }
func (m *PageDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*PageDeleteRequest) ProtoMessage()               {}
func (*PageDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

type Page struct {
	Id       string   `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Account  *Account `protobuf:"bytes,2,opt,name=account" json:"account,omitempty"`
	Text     string   `protobuf:"bytes,3,opt,name=text" json:"text,omitempty"`
	Created  int64    `protobuf:"varint,4,opt,name=created" json:"created,omitempty"`
	Modified int64    `protobuf:"varint,5,opt,name=modified" json:"modified,omitempty"`
}

func (m *Page) Reset()                    { *m = Page{} }
func (m *Page) String() string            { return proto.CompactTextString(m) }
func (*Page) ProtoMessage()               {}
func (*Page) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *Page) GetAccount() *Account {
	if m != nil {
		return m.Account
	}
	return nil
}

type PagesSet struct {
	Pages []*Page `protobuf:"bytes,1,rep,name=pages" json:"pages,omitempty"`
	Total int64   `protobuf:"varint,2,opt,name=total" json:"total,omitempty"`
	Page  int64   `protobuf:"varint,3,opt,name=page" json:"page,omitempty"`
}

func (m *PagesSet) Reset()                    { *m = PagesSet{} }
func (m *PagesSet) String() string            { return proto.CompactTextString(m) }
func (*PagesSet) ProtoMessage()               {}
func (*PagesSet) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *PagesSet) GetPages() []*Page {
	if m != nil {
		return m.Pages
	}
	return nil
}

func init() {
	proto.RegisterType((*Empty)(nil), "Empty")
	proto.RegisterType((*Account)(nil), "Account")
	proto.RegisterType((*Session)(nil), "Session")
	proto.RegisterType((*RegisterRequest)(nil), "RegisterRequest")
	proto.RegisterType((*ConnectRequest)(nil), "ConnectRequest")
	proto.RegisterType((*PageGetRequest)(nil), "PageGetRequest")
	proto.RegisterType((*PageCreateRequest)(nil), "PageCreateRequest")
	proto.RegisterType((*PageUpdateRequest)(nil), "PageUpdateRequest")
	proto.RegisterType((*PageDeleteRequest)(nil), "PageDeleteRequest")
	proto.RegisterType((*Page)(nil), "Page")
	proto.RegisterType((*PagesSet)(nil), "PagesSet")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Accounts service

type AccountsClient interface {
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*Session, error)
	Connect(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (*Session, error)
}

type accountsClient struct {
	cc *grpc.ClientConn
}

func NewAccountsClient(cc *grpc.ClientConn) AccountsClient {
	return &accountsClient{cc}
}

func (c *accountsClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*Session, error) {
	out := new(Session)
	err := grpc.Invoke(ctx, "/Accounts/Register", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsClient) Connect(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (*Session, error) {
	out := new(Session)
	err := grpc.Invoke(ctx, "/Accounts/Connect", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Accounts service

type AccountsServer interface {
	Register(context.Context, *RegisterRequest) (*Session, error)
	Connect(context.Context, *ConnectRequest) (*Session, error)
}

func RegisterAccountsServer(s *grpc.Server, srv AccountsServer) {
	s.RegisterService(&_Accounts_serviceDesc, srv)
}

func _Accounts_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Accounts/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accounts_Connect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServer).Connect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Accounts/Connect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServer).Connect(ctx, req.(*ConnectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Accounts_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Accounts",
	HandlerType: (*AccountsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _Accounts_Register_Handler,
		},
		{
			MethodName: "Connect",
			Handler:    _Accounts_Connect_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

// Client API for Pages service

type PagesClient interface {
	PageCreate(ctx context.Context, in *PageCreateRequest, opts ...grpc.CallOption) (*Page, error)
	PageUpdate(ctx context.Context, in *PageUpdateRequest, opts ...grpc.CallOption) (*Page, error)
	PageDelete(ctx context.Context, in *PageDeleteRequest, opts ...grpc.CallOption) (*Page, error)
	PageGet(ctx context.Context, in *PageGetRequest, opts ...grpc.CallOption) (*Page, error)
	PageList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PagesSet, error)
}

type pagesClient struct {
	cc *grpc.ClientConn
}

func NewPagesClient(cc *grpc.ClientConn) PagesClient {
	return &pagesClient{cc}
}

func (c *pagesClient) PageCreate(ctx context.Context, in *PageCreateRequest, opts ...grpc.CallOption) (*Page, error) {
	out := new(Page)
	err := grpc.Invoke(ctx, "/Pages/PageCreate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pagesClient) PageUpdate(ctx context.Context, in *PageUpdateRequest, opts ...grpc.CallOption) (*Page, error) {
	out := new(Page)
	err := grpc.Invoke(ctx, "/Pages/PageUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pagesClient) PageDelete(ctx context.Context, in *PageDeleteRequest, opts ...grpc.CallOption) (*Page, error) {
	out := new(Page)
	err := grpc.Invoke(ctx, "/Pages/PageDelete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pagesClient) PageGet(ctx context.Context, in *PageGetRequest, opts ...grpc.CallOption) (*Page, error) {
	out := new(Page)
	err := grpc.Invoke(ctx, "/Pages/PageGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pagesClient) PageList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PagesSet, error) {
	out := new(PagesSet)
	err := grpc.Invoke(ctx, "/Pages/PageList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Pages service

type PagesServer interface {
	PageCreate(context.Context, *PageCreateRequest) (*Page, error)
	PageUpdate(context.Context, *PageUpdateRequest) (*Page, error)
	PageDelete(context.Context, *PageDeleteRequest) (*Page, error)
	PageGet(context.Context, *PageGetRequest) (*Page, error)
	PageList(context.Context, *Empty) (*PagesSet, error)
}

func RegisterPagesServer(s *grpc.Server, srv PagesServer) {
	s.RegisterService(&_Pages_serviceDesc, srv)
}

func _Pages_PageCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PagesServer).PageCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Pages/PageCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PagesServer).PageCreate(ctx, req.(*PageCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pages_PageUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PagesServer).PageUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Pages/PageUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PagesServer).PageUpdate(ctx, req.(*PageUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pages_PageDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PagesServer).PageDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Pages/PageDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PagesServer).PageDelete(ctx, req.(*PageDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pages_PageGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PagesServer).PageGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Pages/PageGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PagesServer).PageGet(ctx, req.(*PageGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pages_PageList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PagesServer).PageList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Pages/PageList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PagesServer).PageList(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Pages_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Pages",
	HandlerType: (*PagesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PageCreate",
			Handler:    _Pages_PageCreate_Handler,
		},
		{
			MethodName: "PageUpdate",
			Handler:    _Pages_PageUpdate_Handler,
		},
		{
			MethodName: "PageDelete",
			Handler:    _Pages_PageDelete_Handler,
		},
		{
			MethodName: "PageGet",
			Handler:    _Pages_PageGet_Handler,
		},
		{
			MethodName: "PageList",
			Handler:    _Pages_PageList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("pages.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 571 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x74, 0x94, 0xcf, 0x6e, 0xd3, 0x4e,
	0x10, 0xc7, 0x65, 0xbb, 0x8e, 0x9d, 0xc9, 0x4f, 0x49, 0xb3, 0xfa, 0x01, 0x96, 0x5b, 0xa1, 0x68,
	0x39, 0x10, 0x55, 0x62, 0x23, 0x05, 0x24, 0xa4, 0x9e, 0xa8, 0x52, 0xc4, 0xa5, 0x07, 0x70, 0x85,
	0x38, 0x9b, 0x78, 0xb0, 0x56, 0x24, 0x5e, 0xe3, 0xdd, 0x08, 0x7a, 0x45, 0xbc, 0x41, 0xdf, 0x84,
	0x57, 0xe1, 0x15, 0x78, 0x10, 0xb4, 0x7f, 0x9c, 0x3a, 0x69, 0x73, 0xf3, 0xec, 0xcc, 0x7c, 0xf7,
	0x3b, 0x3b, 0x1f, 0x19, 0x06, 0x75, 0x5e, 0xa2, 0x64, 0x75, 0x23, 0x94, 0x48, 0x4f, 0x4b, 0x21,
	0xca, 0x15, 0xce, 0xf2, 0x9a, 0xcf, 0xf2, 0xaa, 0x12, 0x2a, 0x57, 0x5c, 0x54, 0x2e, 0x4b, 0x23,
	0x08, 0xdf, 0xae, 0x6b, 0x75, 0x43, 0x6f, 0x20, 0xba, 0x58, 0x2e, 0xc5, 0xa6, 0x52, 0x64, 0x08,
	0x3e, 0x2f, 0x12, 0x6f, 0xe2, 0x4d, 0xfb, 0x99, 0xcf, 0x0b, 0x42, 0xe0, 0xa8, 0xca, 0xd7, 0x98,
	0xf8, 0xe6, 0xc4, 0x7c, 0x93, 0xff, 0x21, 0xc4, 0x75, 0xce, 0x57, 0x49, 0x60, 0x0e, 0x6d, 0x40,
	0x12, 0x88, 0x96, 0x0d, 0xe6, 0x0a, 0x8b, 0x24, 0x9c, 0x78, 0xd3, 0x20, 0x6b, 0x43, 0x92, 0x42,
	0xbc, 0x16, 0x05, 0xff, 0xc2, 0xb1, 0x48, 0x7a, 0x26, 0xb5, 0x8d, 0xe9, 0x02, 0xa2, 0x6b, 0x94,
	0x92, 0x8b, 0x8a, 0x50, 0x88, 0x72, 0xeb, 0xc2, 0xdc, 0x3f, 0x98, 0xc7, 0xcc, 0xb9, 0xca, 0xda,
	0x84, 0xbe, 0x5a, 0x89, 0xaf, 0x58, 0x39, 0x3f, 0x36, 0xa0, 0x9f, 0x60, 0x94, 0x61, 0xc9, 0xa5,
	0xc2, 0x26, 0xc3, 0x6f, 0x1b, 0x94, 0x6a, 0xeb, 0xdb, 0x7b, 0xc8, 0xb7, 0xdf, 0xf5, 0x9d, 0x42,
	0x5c, 0xe7, 0x52, 0x7e, 0x17, 0x4d, 0xe1, 0x06, 0xda, 0xc6, 0xf4, 0x0a, 0x86, 0x0b, 0x51, 0x55,
	0xb8, 0x54, 0xad, 0xee, 0x53, 0x00, 0x5e, 0x60, 0xa5, 0xb4, 0xfb, 0xc6, 0xa9, 0x77, 0x4e, 0x76,
	0xd4, 0xfc, 0x3d, 0xb5, 0x09, 0x0c, 0xdf, 0xe7, 0x25, 0xbe, 0xc3, 0xad, 0xda, 0xde, 0x6b, 0xd3,
	0xe7, 0x30, 0xd6, 0x15, 0x0b, 0xf3, 0x70, 0x9d, 0x51, 0x14, 0xfe, 0x50, 0xed, 0x28, 0xfa, 0x9b,
	0xbe, 0xb6, 0x85, 0x1f, 0xeb, 0xa2, 0x53, 0xf8, 0xc0, 0xee, 0x4c, 0xa3, 0xdf, 0x69, 0x7c, 0x66,
	0x1b, 0x2f, 0x71, 0x85, 0x07, 0x1b, 0xe9, 0x2f, 0x0f, 0x8e, 0x74, 0xd5, 0x3d, 0xc5, 0xce, 0x8a,
	0xfc, 0x43, 0x2b, 0x6a, 0x6f, 0x0d, 0xee, 0x6e, 0xed, 0xb2, 0x71, 0x74, 0x98, 0x8d, 0x70, 0x8f,
	0x8d, 0x0f, 0x10, 0x6b, 0x17, 0xf2, 0x1a, 0x15, 0x39, 0x81, 0xd0, 0x80, 0x9d, 0x78, 0x93, 0x60,
	0x3a, 0x98, 0x87, 0x4c, 0x67, 0x32, 0x7b, 0x66, 0xa9, 0x50, 0xb9, 0x5d, 0x6c, 0x90, 0xd9, 0x40,
	0x1b, 0xd1, 0x69, 0x63, 0x24, 0xc8, 0xcc, 0xf7, 0xfc, 0xd6, 0x83, 0xd8, 0x39, 0x96, 0xe4, 0x12,
	0xe2, 0x16, 0x1b, 0x72, 0xcc, 0xf6, 0x08, 0x4a, 0x63, 0xe6, 0xc0, 0xa4, 0xa7, 0x3f, 0xff, 0xfc,
	0xbd, 0xf5, 0x1f, 0xd3, 0xf1, 0xcc, 0xcd, 0xc8, 0x1a, 0x57, 0x7b, 0xee, 0x9d, 0x91, 0x0b, 0x88,
	0x1c, 0x23, 0x64, 0xc4, 0x76, 0x69, 0xe9, 0x68, 0x9c, 0x18, 0x8d, 0x47, 0xf4, 0x78, 0xab, 0xb1,
	0xb4, 0xa5, 0xe7, 0xde, 0xd9, 0xfc, 0xb7, 0x0f, 0xa1, 0x99, 0x94, 0xbc, 0x01, 0xb8, 0x03, 0x80,
	0x10, 0x76, 0x8f, 0x86, 0xd4, 0x4e, 0x4e, 0x9f, 0x18, 0xbd, 0x31, 0xfd, 0x6f, 0xa6, 0xe7, 0x62,
	0xf6, 0x39, 0xb5, 0x1d, 0xa7, 0x60, 0xc9, 0x70, 0x0a, 0x3b, 0x98, 0x1c, 0x50, 0xd8, 0x98, 0x9a,
	0x8e, 0x82, 0x45, 0xc4, 0x29, 0xec, 0xf0, 0x72, 0x40, 0xa1, 0x30, 0x35, 0x5a, 0xe1, 0x15, 0x44,
	0x0e, 0x74, 0x32, 0x62, 0xbb, 0xc8, 0xb7, 0xbd, 0x63, 0xd3, 0x3b, 0x20, 0x7d, 0xdb, 0x5b, 0xa2,
	0x22, 0x2f, 0xec, 0xba, 0xaf, 0xb8, 0x54, 0xa4, 0xc7, 0xcc, 0x9f, 0x29, 0xed, 0xb3, 0x96, 0x00,
	0x3a, 0x34, 0x1d, 0x31, 0xe9, 0x99, 0x0e, 0xf9, 0xb9, 0x67, 0x7e, 0x62, 0x2f, 0xff, 0x05, 0x00,
	0x00, 0xff, 0xff, 0xec, 0x29, 0x2e, 0x78, 0xf1, 0x04, 0x00, 0x00,
}
